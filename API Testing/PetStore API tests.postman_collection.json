{
	"info": {
		"_postman_id": "63206d9c-6bc6-4396-81b8-e9c85b22ae78",
		"name": "PetStore API tests",
		"description": "This collection contains a comprehensive suite of tests for the PetStore API, designed to validate the following functionalities:\n\n- **Pet Management**: Testing endpoints related to pet creation, updates, deletion, and retrieval.\n    \n- **Store Operations**: Testing functionality related to the store, such as inventory management and order processing.\n    \n- **User Management**: Testing user-related operations including account creation, user login, and retrieval of user information.\n    \n\nEach test is organized into relevant categories to ensure proper coverage and validate the expected behavior of the API. Assertions are included to check response status codes, response times, and data accuracy.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37603340",
		"_collection_link": "https://www.postman.com/postman-damian/workspace/petstore-api-tests/collection/37603340-63206d9c-6bc6-4396-81b8-e9c85b22ae78?action=share&source=collection_link&creator=37603340"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "Add a new pet with valid data in all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									" var jsonData = pm.response.json(); \r",
									"pm.test(\"Check if name is Bleki\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Bleki\");\r",
									"\r",
									"pm.test(\"Pet ID is correct\", function () {  \r",
									"    pm.expect(jsonData.id).to.eql(12345);  // Check if the id is 12345\r",
									"});\r",
									"pm.test(\"Pet status is available\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"available\");  // Check if status is 'available'\r",
									"});\r",
									"\r",
									"});\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 12345,\r\n  \"category\": {\r\n    \"id\": 12345,\r\n    \"name\": \"Bleki\"\r\n  },\r\n  \"name\": \"Bleki\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 12345,\r\n      \"name\": \"Bleki\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								""
							]
						},
						"description": "Adding a new pet by filing all fields with valid data"
					},
					"response": []
				},
				{
					"name": "Add a new pet with Invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									" \r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":a,\r\n  \"category\": {\r\n    \"id\": a,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": a,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								""
							]
						},
						"description": "Adding a new pet with by filing all fields with invalid data"
					},
					"response": []
				},
				{
					"name": "GET Pet by Valid ID format (Existing ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ID is an integer and matches the expected value\", function () {\r",
									"    pm.expect(Number.isInteger(jsonData.id)).to.be.true;  // Assert the ID is an integer\r",
									"    pm.expect(jsonData.id).to.eql(12345);  // Assert the exact value of the ID\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{valid ID format existing pet}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{valid ID format existing pet}}"
							]
						},
						"description": "Retrieve pet by valid format ID for exsisting pet"
					},
					"response": []
				},
				{
					"name": "GET pet by Valid ID format - non existing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var petId = Math.floor(Math.random() * 10) + 100; \r",
									"pm.environment.set(\"petId\", petId); \r",
									"console.log(\"Generated petId: \" + petId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Pet not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						},
						"description": "Retrieve pet by valid format ID and non-exsisting pet"
					},
					"response": []
				},
				{
					"name": "Get pet by Invalid format ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response contains no valid ID\", function () {\r",
									"    var jsonData = pm.response.json();  // Make sure to parse the response body\r",
									"    pm.expect(Number.isInteger(jsonData.id)).to.be.false;  // Assuming the invalid ID is not an integer\r",
									"});\r",
									"pm.test(\"Message contains 'NumberFormatException'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"NumberFormatException\");\r",
									"});\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{invalid_format_pet_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{invalid_format_pet_id}}"
							]
						},
						"description": "Retrieve pet by invalid format ID"
					},
					"response": []
				},
				{
					"name": "Update Pet with Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" var jsonData = pm.response.json(); \r",
									"pm.test(\"Check if status is sold\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"sold\");\r",
									"});\r",
									"\r",
									"// Test to check if the ID is present and is a number\r",
									"pm.test(\"Check if ID is present and is a number\", function () {\r",
									"    pm.expect(jsonData.id).to.exist;\r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 12345,\r\n  \"category\": {\r\n    \"id\": 12345,\r\n    \"name\": \"Bleki\"\r\n  },\r\n  \"name\": \"Bleki\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 12345,\r\n      \"name\": \"Bleki\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						},
						"description": "Updating pet by filing all fields with valid data"
					},
					"response": []
				},
				{
					"name": "Delete existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet is removed\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"\r",
									"   \r",
									"\r",
									"    // Check if the type is \"unknown\"\r",
									"    pm.expect(responseBody.type).to.equal(\"unknown\");\r",
									"\r",
									"    // Check if the message is \"12345\" \r",
									"    pm.expect(responseBody.message).to.equal(\"12345\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{valid ID format existing pet}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{valid ID format existing pet}}"
							]
						},
						"description": "Deleting existing pet"
					},
					"response": []
				}
			],
			"description": "tests for api end points for pets"
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "Get pets inventory by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has expected structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"petId\");\r",
									"    pm.expect(jsonData).to.have.property(\"quantity\");\r",
									"    pm.expect(jsonData).to.have.property(\"shipDate\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"complete\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"petId\": 0,\r\n  \"quantity\": 0,\r\n  \"shipDate\": \"2024-10-22T07:27:20.905Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var orderId = Math.floor(Math.random() * 10) + 1;  // Nasumično generiše broj između 1 i 10\r",
									"pm.environment.set(\"orderId\", orderId); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response has expected structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"petId\");\r",
									"    pm.expect(jsonData).to.have.property(\"quantity\");\r",
									"    pm.expect(jsonData).to.have.property(\"shipDate\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"complete\");\r",
									"});\r",
									"pm.test(\"Status is 'placed'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"placed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find purchase order by invalid ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var orderId = Math.floor(Math.random() * 10) + 100;  // Nasumično generiše broj između 1 i 10\r",
									"pm.environment.set(\"orderId\", orderId); \r",
									"console.log(\"Generated orderId: \" + orderId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order by valid D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var orderId = Math.floor(Math.random() * 10) ;  // Nasumično generiše broj između 1 i 10\r",
									"pm.environment.set(\"orderId\", orderId); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order by Invalid ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var orderId = Math.floor(Math.random() * 10)-11 ;  // Nasumično generiše broj između 1 i 10\r",
									"pm.environment.set(\"orderId\", orderId); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Create user with valid data in all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Response contains 'code'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'message'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"\t\t\r",
									"\t\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
									"\r",
									"// Function to generate a random string of a given length\r",
									"function getRandomName(length) {\r",
									"    let result = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate random first and last names of 5 characters each\r",
									"pm.variables.set(\"randomFirstName\", getRandomName(5));\r",
									"pm.variables.set(\"randomLastName\", getRandomName(5));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"id\": 1,\r\n  \"username\": \"testuser\",\r\n  \"firstName\": \"{{randomFirstName}}\",\r\n  \"lastName\": \"{{randomLastName}}\",\r\n  \"email\": \"user@example.com\",\r\n  \"password\": \"Password123!\",\r\n  \"phone\": \"1234567890\",\r\n  \"userStatus\": 1\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Validate the creation of a new user using valid data"
					},
					"response": []
				},
				{
					"name": "update existing user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
									"\r",
									"// Function to generate a random string of a given length\r",
									"function getRandomName(length) {\r",
									"    let result = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate random first and last names of 5 characters each\r",
									"pm.variables.set(\"randomFirstName\", getRandomName(5));\r",
									"pm.variables.set(\"randomLastName\", getRandomName(5));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"username\": \"testuser\",\r\n  \"firstName\": \"{{randomFirstName}}\",\r\n  \"lastName\": \"{{randomLastName}}\",\r\n  \"email\": \"user@example.com\",\r\n  \"password\": \"Password123!\",\r\n  \"phone\": \"1234567890\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/testuser",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"testuser"
							]
						},
						"description": "Validate updating of a new user using valid data"
					},
					"response": []
				},
				{
					"name": "Create user with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomInt\", Math.floor(Math.random() * 10000)); // Nasumičan broj za ID i druge vrednosti\r",
									"pm.variables.set(\"randomUsername\", \"user_\" + pm.variables.get(\"randomInt\"));\r",
									"pm.variables.set(\"randomFirstName\", \"Ime_\" + pm.variables.get(\"randomInt\"));\r",
									"pm.variables.set(\"randomLastName\", \"Prezime_\" + pm.variables.get(\"randomInt\"));\r",
									"pm.variables.set(\"randomEmail\", \"email\" + pm.variables.get(\"randomInt\") + \"@example.com\");\r",
									"pm.variables.set(\"randomPassword\", \"pass\" + pm.variables.get(\"randomInt\"));\r",
									"pm.variables.set(\"randomPhone\", \"+3816\" + Math.floor(100000 + Math.random() * 900000)); // Nasumičan telefonski broj\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"id\": ABC,\r\n  \"username\": \"test_user\",\r\n  \"firstName\": \"{{randomFirstName}}\",\r\n  \"lastName\": \"{{randomLastName}}\",\r\n  \"email\": \"user@example.com\",\r\n  \"password\": \"Password123!\",\r\n  \"phone\": \"1234567890\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "verify the creation of a new user with invalid data"
					},
					"response": []
				},
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the status code is 200 (successful login)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\t\r",
									"\r",
									"\r",
									"\t\r",
									"\r",
									"\t\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{username}}"
							]
						},
						"description": "test login of created user"
					},
					"response": []
				},
				{
					"name": "user logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						},
						"description": "Verify user logout"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the status code is 200 (successful login)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{username}}"
							]
						},
						"description": "verify deleting existing user"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{Api key}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "key",
				"value": "special-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "valid ID format existing pet",
			"value": "12345",
			"type": "default"
		},
		{
			"key": "valid ID format non existing pet",
			"value": "100000",
			"type": "default"
		},
		{
			"key": "invalid_format_pet_id",
			"value": "abc",
			"type": "default"
		},
		{
			"key": "Api key",
			"value": "special-key"
		},
		{
			"key": "username",
			"value": "",
			"type": "default"
		}
	]
}